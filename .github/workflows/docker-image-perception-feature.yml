name: Docker Image CI - Feature Branch

on:
  push:
    branches: [ feature/** ]

jobs:
  build-ros-perception-x86-64:
    name: "Build ROS perception X86/64"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "docker.pkg.github.com/sonia-auv/sonia_common/sonia_common:x86-perception-latest"
      ARCH: x86
      TARGET_TYPE: perception
      TARGET_VERSION: feature
      IMAGE_NAME: proc_image_processing
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Build the docker image (perception based)
        run: |
          docker build . --tag build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Create Docker Image Tag
        run: |
          docker tag build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}-${GITHUB_REF##*/}

      - name: Run Sonarcloud
        run: |
          docker build -f Dockerfile.sonarcloud --build-arg BASE_IMAGE=build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}} --build-arg SONAR_TOKEN=${{secrets.SONAR_TOKEN}} --build-arg BRANCH=${GITHUB_REF#refs/heads/} .

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  build-ros-perception-arm64:
    name: "Build ROS perception ARM64"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "docker.pkg.github.com/sonia-auv/sonia_common/sonia_common:arm64-perception-latest"
      ARCH: arm64
      TARGET_TYPE: perception
      TARGET_VERSION: feature
      IMAGE_NAME: proc_image_processing
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Enable Docker Daemon Experimental Features
        run: |
          sudo rm /etc/docker/daemon.json
          echo '{"experimental": true , "cgroup-parent": "/actions_job" }' | sudo tee -a /etc/docker/daemon.json
          sudo service docker restart
          docker version

      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get update
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (perception based)
        run: |
          docker build . --tag build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Create Docker Image Tag
        run: |
          docker tag build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}-${GITHUB_REF##*/}

      - name: Push Image to Github Packages Registry
        run: |
          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  build-proc_image_processing:
    name: "Build proc_image_processing"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "docker.pkg.github.com/sonia-auv/sonia_common/sonia_common:x86-perception-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Set environment variables
        id: vars
        run: |
          echo "::set-output name=branch-name::${GITHUB_REF##*/}"
          echo "::set-output name=branch-type::$(echo ${GITHUB_REF#refs/heads/} | sed 's#/.*##g')"
          echo "::set-output name=date::$(date '+%Y-%m-%d_%H:%M:%S')"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitLab
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64, linux/arm64
          cache-from: type=registry,ref=ghcr.io/sonia_auv/proc_image_processing/proc_image_processing:${{steps.vars.outputs.branch-type}}-${{steps.vars.outputs.branch-name}}
          cache-to: type=inline
          tags: |
            ghcr.io/sonia_auv/proc_image_processing/proc_image_processing:${{steps.vars.outputs.branch-type}}-${{steps.vars.outputs.branch-name}}
          build-args: |
            BUILD_DATE=${{steps.vars.outputs.date}}
            VERSION=${{steps.vars.outputs.branch-type}}-${{steps.vars.outputs.branch-name}}-${{steps.vars.outputs.date}}${GITHUB_REF##*/}
            BASE_IMAGE=${{env.BASE_IMAGE}}

  #      - name: Run Sonarcloud
  #        run: |
  #          docker build -f Dockerfile.sonarcloud --build-arg BASE_IMAGE=build-feature-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}} --build-arg SONAR_TOKEN=${{secrets.SONAR_TOKEN}} --build-arg BRANCH=${GITHUB_REF#refs/heads/} .

  #      - name: Push Image to Github Packages Registry
  #        run: |
  #          docker push --all-tags ${GITHUB_REMOTE_URL}/${IMAGE_NAME}

  notify-success:
    name: "Notify Slack - Success"
    runs-on: ubuntu-latest
    needs: [ build-ros-perception-x86-64, build-ros-perception-arm64 ]
    if: success()
    steps:
      - name: Notify Slack Success
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: SUCCESS
          color: good

  notify-fail:
    name: "Notify Slack - Failure"
    runs-on: ubuntu-latest
    needs: [ build-ros-perception-x86-64, build-ros-perception-arm64 ]
    if: failure()
    steps:
      - name: Notify Slack Fail
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: FAILED
          color: danger
